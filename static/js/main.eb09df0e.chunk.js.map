{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","utils/filterTodos.ts","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoList","dispatch","useState","isLoading","setIsLoading","hasError","setHasError","selectedTodo","filteredTodos","ACTIVE","completed","COMPLETED","normalizedQuery","toLocaleLowerCase","trim","title","includes","filterTodos","useEffect","fetchTodos","a","todosFromServer","todosActions","length","map","id","isTodoSelected","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","TodoModal","user","setUser","fetchUser","userId","userFromServer","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb09df0e.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterByQuery = { type: 'filter/QUERY', payload: string };\ntype FilterByStatus = { type: 'filter/STATUS', payload: Status };\n\ntype Action = FilterByQuery | FilterByStatus;\n\nconst filterQuery = (query: string): FilterByQuery => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\nconst filterStatus = (status: Status): FilterByStatus => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nexport const actions = { filterQuery, filterStatus };\n\ntype State = {\n  status: Status,\n  query: string,\n};\n\nconst initialState: State = {\n  status: Status.ALL,\n  query: '',\n};\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/SET', payload: Todo[] };\n\ntype Action = SetTodos;\n\nconst setTodos = (todos: Todo[]): SetTodos => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = {\n  todos: Todo[],\n};\n\nconst initialState: State = {\n  todos: [],\n};\n\nconst todosReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as todosActions } from '../../features/todos';\nimport { getTodos } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { filterTodos } from '../../utils';\nimport { Loader } from '../Loader';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const { todos } = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const filteredTodos = filterTodos(todos, status, query);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(todosActions.setTodos(todosFromServer));\n        setIsLoading(false);\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (hasError) {\n    return (\n      <p className=\"notification is-danger\">\n        Opppsss server error\n      </p>\n    );\n  }\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredTodos.map(todo => {\n              const { id, title, completed } = todo;\n              const isTodoSelected = selectedTodo?.id === id;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  className={classNames({\n                    'has-background-info-light': isTodoSelected,\n                  })}\n                  key={id}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span\n                        className=\"icon\"\n                        data-cy=\"iconCompleted\"\n                      >\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames({\n                      'has-text-danger': !completed,\n                      'has-text-success': completed,\n                    })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames({\n                          'far fa-eye-slash': isTodoSelected,\n                          'far fa-eye': !isTodoSelected,\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { Status, Todo } from '../types';\n\nexport const filterTodos = (todos: Todo[], status: Status, query: string) => {\n  let filteredTodos = todos;\n\n  switch (status) {\n    case Status.ACTIVE:\n      filteredTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case Status.COMPLETED:\n      filteredTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  const normalizedQuery = query.toLocaleLowerCase().trim();\n\n  /* eslint-disable max-len */\n  filteredTodos = filteredTodos.filter(todo => todo.title.toLocaleLowerCase().includes(normalizedQuery));\n\n  return filteredTodos;\n};\n","import React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filteredTodos = useAppSelector(state => state.filter);\n  const { status, query } = filteredTodos;\n\n  const handleStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.filterStatus(event.target.value as Status));\n  };\n\n  const handleQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.filterQuery(event.target.value));\n  };\n\n  const handleClearQuery = () => {\n    dispatch(actions.filterQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query && (\n            <button\n              aria-label=\"clear query\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const dispatch = useAppDispatch();\n  const removeCurrentTodo = () => dispatch(actions.removeTodo());\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        if (currentTodo) {\n          const userFromServer = await getUser(currentTodo.userId);\n\n          setUser(userFromServer);\n        }\n      } catch {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  if (!currentTodo) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {currentTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!currentTodo?.completed && (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {currentTodo?.completed && (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n\n            {hasError && (\n              <div className=\"notification is-warning\">\n                Server error!\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n            <div className=\"block\">\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n      <TodoModal />\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}